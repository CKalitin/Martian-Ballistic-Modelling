import math
import numpy as np

import sim_polar
import utils_data

def alt_vs_downrange_to_global_cartesian(comparison):
    """
    Converts altitude vs downrange distance data from a comparison dictionary
    to global Cartesian coordinates, modifying the dictionary in place.
    """

    # Convert to Cartesian coordinates (x, y)
    cartesian_x = []
    cartesian_y = []
    
    for alt, dist in zip(comparison['AltVsDownrangeDist-alt'], comparison['AltVsDownrangeDist-dist']):
        radial_distance = utils_data.MARS_RADIUS + alt
        angular_distance_rad = dist / radial_distance  # Convert distance to radians
        
        global_cartesian_pos_x = radial_distance * math.sin(angular_distance_rad) / 1000  # Convert to km
        global_cartesian_pos_y = radial_distance * math.cos(angular_distance_rad) / 1000
        
        cartesian_x.append(global_cartesian_pos_x)
        cartesian_y.append(global_cartesian_pos_y)

    comparison['global_cartesian_pos_x'] = cartesian_x
    comparison['global_cartesian_pos_y'] = cartesian_y

# Phoenix Entry:
phoenix = {
    'label': "Phoenix",
    # Velocity (m/s)
    'AltVsVel-vel': np.array([
    5873, 5884, 5895, 5895, 5884, 5861, 5828, 5773, 5706, 5573, 5452, 5330,
    5075, 4787, 4488, 4199, 3934, 3335, 2659, 2183, 1850, 1496, 1263, 1030,
    765, 654, 554, 476, 410, 355, 299, 199, 122, 78, 66, 55, 0
    ]),
    # Altitude (m)
    'AltVsVel-alt': np.array([
    123545, 104182, 93273, 73909, 70091, 64909, 60273, 56182, 52909, 49091,
    46909, 45000, 42273, 39818, 38182, 36545, 35182, 32455, 30000, 28091,
    26727, 25091, 23727, 22091, 19636, 18273, 16636, 15273, 13636, 12000,
    9818, 9273, 8727, 7636, 5727, 1364, 0
    ])
}

# Opportunity Entry:
opportunity = {
    'label': "Opportunity",
    # Velocity (m/s)
    'AltVsVel-vel': np.array([
    5537, 5548, 5548, 5548, 5559, 5559, 5559, 5548, 5537, 5515, 5481, 5426, 5359, 5259, 5182, 5082, 4960, 4827, 4682, 4549, 4405, 4261, 4117, 3972, 3828, 3673, 3528, 3384, 3307, 2430, 2275, 2119, 1975, 1820, 1675, 1520, 1376, 1232, 1087, 943, 810, 677, 610, 510, 455, 411, 377, 333, 89, 78, 67, 67, 33
    ]),
    # Altitude (m)
    'AltVsVel-alt': np.array([
    123497, 117486, 112295, 99454, 93443, 87432, 81421, 75683, 69945, 64208, 60383, 57104, 53825, 50820, 48634, 47268, 45355, 43716, 42077, 40984, 39891, 38525, 37705, 36885, 35792, 34973, 34153, 33607, 33060, 28689, 28142, 27322, 26503, 25683, 24863, 24044, 22951, 21858, 20765, 19399, 17760, 15847, 14754, 12568, 11202, 10383, 10383, 10109, 7650, 6831, 3279, 1639, 546
    ])
}

# Curiosity Entry:
curiosity = {
    'label': "Curiosity",
    # Velocity (m/s)
    'AltVsVel-vel': np.array([
    466, 521, 621, 721, 832, 943, 1021, 1098, 1176, 1243, 1320, 1398, 1476, 1553, 1631, 1709, 1786, 1864, 1942, 2008, 2086, 2164, 2241, 2308, 2386, 2463, 2530, 2607, 2685, 2752, 2829, 2907, 2974, 3051, 3129, 3196, 3273, 3340, 3417, 3484, 3562, 3628, 3706, 3773, 3839, 3917, 3983, 4061, 4128, 4194, 4261, 4338, 4405, 4472, 4538, 4605, 4682, 4738, 4816, 4871, 4949, 5126, 5193, 5259, 5326, 5381, 5448, 5503, 5548, 5581, 5614, 5637, 5659, 5670, 5681, 5703, 5692, 5681, 5670, 5659, 5648, 5648, 5648, 5648, 5659, 5670, 5681, 5681, 5614, 5603, 5603, 5603, 5592, 5592, 5592, 5592, 5592, 5592, 5581, 5581, 5581, 5592, 5592, 5581, 5592, 5592, 5592, 5592, 5603, 5603, 5603, 5603, 5614, 5614
    ]),
    # Altitude (m)
    'AltVsVel-alt': np.array([
    12022, 13388, 14208, 14754, 14754, 14754, 14208, 14208, 14208, 13934, 13934, 13934, 13934, 13934, 13934, 13934, 13934, 14208, 14208, 14208, 14208, 14481, 14481, 14754, 14754, 15027, 15301, 15574, 15847, 15847, 15847, 16120, 16393, 16667, 16940, 16940, 17486, 17760, 18033, 18306, 18579, 18852, 19399, 19399, 19945, 20492, 20765, 21038, 21585, 21858, 22404, 22951, 23224, 23770, 24317, 24863, 25410, 25956, 26503, 27322, 27596, 30055, 31148, 31967, 33333, 34426, 35792, 37158, 38798, 40437, 42077, 43989, 45902, 47814, 49454, 51366, 53825, 55738, 57377, 59290, 60929, 62842, 64754, 66667, 68306, 70219, 71858, 73770, 77049, 78689, 80601, 82514, 84426, 86066, 87978, 89891, 91803, 93716, 95628, 97541, 99180, 101093, 103005, 104645, 106557, 108470, 110383, 112295, 113934, 115847, 117760, 119672, 121585, 123224
    ])
}

# Pathfinder Entry:
pathfinder = {
    'label': "Pathfinder",
    # Velocity (m/s)
    'AltVsVel-vel': np.array([
    344, 566, 777, 1032, 1243, 1454, 1675, 1997, 2330, 2652, 2985, 3318, 3639, 4028, 4361, 4682, 5015, 5359, 5681, 6003, 6313, 6513, 6713, 6857, 7046, 7212, 7345, 7401, 7445, 7467, 7479, 7490, 7490, 7479, 7479, 7479, 7479, 7467, 7467
    ]),
    # Altitude (m)
    'AltVsVel-alt': np.array([
    7104, 10929, 13115, 14754, 16120, 16940, 18033, 19126, 20219, 21311, 22131, 23224, 24317, 25410, 26503, 27596, 28689, 30328, 31694, 33060, 35246, 36612, 38525, 39891, 42623, 45628, 50000, 53552, 57650, 62842, 69945, 75410, 82514, 89344, 96175, 103279, 107650, 115847, 121585
    ])
}

# Viking Entry:
viking = {
    'label': "Viking",
    # Velocity (m/s)
    'AltVsVel-vel': np.array([
    311, 344, 355, 388, 544, 599, 655, 732, 766, 799, 1121, 1154, 1187, 1376, 1564, 1886, 2264, 2441, 2619, 2785, 2963, 3118, 3284, 3639, 3917, 4072, 4172, 4361, 4449, 4483, 4527, 4516, 4516, 4516, 4516
    ]),
    # Altitude (m)
    'AltVsVel-alt': np.array([
    12842, 15027, 16120, 17486, 22678, 23770, 24317, 24863, 25137, 25410, 25683, 25683, 25683, 25683, 25683, 26503, 27596, 27869, 28415, 29235, 29781, 30874, 31694, 34426, 37432, 39617, 41257, 46448, 50546, 54645, 63115, 67486, 72131, 75683, 78962
    ])
}

# Perseverance Entry:
perseverance = {
    'label': "Perseverance",
    # Velocity (m/s)
    'AltVsVel-vel': np.array([
    5332, 5340, 5348, 5359, 5356, 5322, 5176, 4715, 3861, 2924, 2185, 1677, 1385, 1150, 998, 880, 780, 705, 646, 595, 549, 505, 474, 452, 306, 184, 141, 115, 102, 93, 88, 85, 83, 81, 78, 76, 73, 61, 26, 0, 0
    ]),
    # Altitude (m)
    'AltVsVel-alt': np.array([
    125000, 111243, 97486, 84517, 72135, 59753, 47919, 37788, 30307, 24437, 22412, 21251, 20610, 20610, 20610, 20610, 20610, 20610, 20610, 20610, 20554, 19670, 18786, 17643, 16215, 15132, 14100, 13236, 12462, 11688, 10593, 9355, 8042, 6716, 5389, 4023, 2594, 1645, 826, 7, 0
    ]),
    'AltVsTime-time': np.array([
       0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400
    ]),
    'AltVsTime-alt': np.array([
        125000, 111243, 97486, 84517, 72135, 59753, 47919, 37788, 30307, 24437, 22412, 21251, 20610, 20610, 20610, 20610, 20610, 20610, 20610, 20610, 20554, 19670, 18786, 17643, 16215, 15132, 14100, 13236, 12462, 11688, 10593, 9355, 8042, 6716, 5389, 4580, 4580, 4580, 4580, 3827, 2500
    ]),
    'VelVsTime-time': np.array([
        0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400
    ]),
    'VelVsTime-vel': np.array([
        5332, 5340, 5348, 5359, 5356, 5322, 5176, 4715, 3861, 2924, 2185, 1677, 1385, 1150, 998, 880, 780, 705, 646, 595, 549, 505, 474, 452, 306, 184, 141, 115, 102, 93, 88, 85, 83, 81, 78, 76, 73, 61, 26, 0, 0
    ]),
    'VelVsTime-label': "Perseverance Vel.",
    'AoAVsTime-time': np.array([
        30, 54, 89, 133, 175, 218, 224, 230, 236
    ]),
    'AoAVsTime-aoa': np.array([
        18, 16, 18, 19, 20, 21, 8, -2, 1
    ]),
    'AoAVsTime-label': "Perseverance AoA",
    'VVelVsTime-time': np.array([
        0, 6, 30, 49, 59, 64, 69, 73, 76, 80, 81, 85, 86, 88, 92, 95, 98, 102, 110, 124, 129, 143, 159, 172, 186, 203, 217, 226, 234, 244, 258, 270, 282, 305, 334, 356, 368, 380, 389, 392, 408
    ]),
    'VVelVsTime-vel': np.array([
        -1514, -1487, -1365, -1263, -1168, -1097, -1008, -919, -836, -708, -651, -555, -491, -440, -376, -306, -255, -197, -140, -102, -95, -89, -95, -108, -127, -153, -172, -197, -217, -178, -172, -178, -191, -185, -178, -172, -153, -127, -121, -102, -95
    ]),
    'VVelVsTime-label': "Perseverance Vertical Vel.",
    'HVelVsTime-time': np.array([
        0, 4, 9, 14, 19, 24, 29, 34, 39, 44, 49, 54, 59, 64, 69, 74, 79, 84, 89, 94, 99, 104, 109, 114, 119, 124, 129, 134, 139, 144, 149, 154, 159, 164, 169, 174, 179, 184, 189, 194, 199, 204, 209, 214, 219, 224, 229, 234, 239, 244, 249, 254, 259, 264, 269, 274, 279, 284, 289, 294, 299, 304, 309, 314, 319, 324, 329, 334, 339, 344, 349, 354, 359, 364, 369, 374, 379, 384, 389, 394, 399, 404, 409, 414
    ]),
    'HVelVsTime-vel': np.array([
        5127, 5138, 5149, 5161, 5173, 5182, 5190, 5198, 5199, 5190, 5182, 5137, 5071, 4926, 4692, 4301, 3827, 3414, 2939, 2561, 2178, 1932, 1732, 1534, 1381, 1267, 1164, 1077, 1002, 940, 884, 839, 794, 753, 715, 678, 649, 620, 591, 570, 551, 533, 514, 495, 475, 455, 436, 418, 314, 218, 174, 141, 121, 101, 82, 65, 49, 35, 30, 28, 26, 26, 27, 25, 23, 21, 13, 5, 0, 3, 5, 8, 13, 31, 36, 32, 13, 5, 7, 10, 12, 15, 17, 19
    ]),
    'HVelVsTime-label': "Perseverance Horizontal Vel.",
    'AltVsDownrangeDist-dist': np.array([
        0, 25669, 51397, 77184, 103031, 128928, 154866, 180843, 206835, 232799, 258717, 284467, 309913, 334751, 358545, 380626, 400476, 418157, 433572, 446941, 458418, 468450, 477410, 485380, 492518, 499024, 505000, 510516, 515640, 520433, 524938, 529200, 533238, 537064, 540696, 544142, 547431, 550574, 553573, 556455, 559238, 561930, 564529, 567032, 569437, 571742, 573950, 576058, 577785, 579024, 579960, 580716, 581351, 581886, 582325, 582675, 582944, 583141, 583299, 583442, 583575, 583705, 583838, 583966, 584084, 584192, 584269, 584306, 584314, 584325, 584347, 584382, 584441, 584568, 584740, 584904, 584999, 585037, 585069, 585114
    ]),
    'AltVsDownrangeDist-alt': np.array([
        125000, 118121, 111243, 104365, 97486, 90707, 84517, 78326, 72135, 65944, 59753, 53562, 47919, 42854, 37788, 33878, 30307, 26735, 24437, 23111, 22412, 21832, 21251, 20671, 20610, 20610, 20610, 20610, 20610, 20610, 20610, 20610, 20610, 20610, 20610, 20610, 20610, 20610, 20610, 20610, 20554, 20112, 19670, 19228, 18786, 18343, 17643, 16929, 16215, 15648, 15132, 14616, 14100, 13623, 13236, 12849, 12462, 12075, 11688, 11212, 10593, 9974, 9355, 8706, 8042, 7379, 6716, 6052, 5389, 4726, 4023, 3308, 2594, 2055, 1645, 1236, 826, 417, 7, 0
    ]),
    'FlightPathAngleVsTime-time': np.array([
        0, 37, 50, 72, 80, 87, 93, 98, 103, 111, 119, 129, 142, 158, 174, 189, 198, 211, 224, 234, 239, 241, 245, 249, 250, 253, 257, 260, 263, 266, 270, 273, 276, 281, 286, 287, 289, 294, 299, 304, 310, 315, 321, 325, 328, 333, 336, 342, 347, 352, 355, 357, 359, 362, 365, 367, 370, 373, 375, 376, 378, 380, 381, 383, 393, 394, 401, 404, 410, 412
    ]),
    'FlightPathAngleVsTime-fpa': np.array([
        -16, -13, -13, -11, -9, -7, -5, -4, -2, -1, -1, 0, 0, 0, -1, -3, -5, -8, -12, -16, -18, -20, -22, -25, -27, -30, -31, -33, -35, -40, -45, -49, -53, -60, -66, -67, -69, -70, -72, -73, -72, -73, -74, -76, -78, -81, -81, -80, -81, -82, -81, -77, -74, -64, -57, -53, -52, -54, -60, -65, -71, -79, -86, -90, -90, -83, -88, -80, -75, -63
    ]),
    'FlightPathAngleVsTime-label': "Perseverance Flight Path Angle",
}

# Starship Entry:
starship = {
    'label': "Starship 2017 Simulation",
    # Velocity (m/s)
    'AltVsVel-vel': np.array([
    0, 73, 147, 275, 386, 514, 533, 569, 606, 643, 680, 753, 845, 919, 1029, 1158, 1286, 1397, 1507, 1599, 1709, 1819, 1985, 2132, 2316, 2481, 2628, 2812, 2996, 3125, 3253, 3382, 3529, 3639, 3750, 3878, 3970, 4080, 4209, 4393, 4558, 4705, 4852, 5091, 5257, 5422, 5625, 5845, 6066, 6305, 6488, 6691, 6875, 7022, 7169, 7242, 7297, 7352, 7389, 7408, 7426, 7444, 7463, 7463, 7481, 7481
    ]),
    # Altitude (m)
    'AltVsVel-alt': np.array([
    0, 535, 803, 1205, 1741, 2410, 4419, 6562, 7633, 8839, 9508, 9910, 9642, 8973, 7901, 6696, 5758, 5089, 4687, 4553, 4419, 4553, 4955, 5491, 6428, 7366, 8437, 9910, 11785, 13258, 14732, 16071, 17812, 19017, 20223, 21562, 22500, 23705, 24910, 26651, 28125, 29330, 30401, 32008, 32946, 33750, 34419, 34955, 35357, 35758, 36160, 36830, 37767, 38839, 40446, 41785, 43125, 44732, 46473, 47410, 48883, 50491, 52366, 54776, 58125, 59866
    ])
}

alt_vs_downrange_to_global_cartesian(perseverance)

# Velocity vs. AoA, interpolated
curiosity_aoa = [
    (6000, 0),
    (5600, 0),
    (4800, 20),
    (3000, 25),
    (1200, 25),
    (500, 20),
    (0, -15)
]

curiosity_data, curiosity_params = sim_polar.simulate(
    mass=3300,
    area=15.9,
    entry_altitude=125000,
    entry_flight_path_angle=-16, # Reality: -14
    entry_velocity=5700,
    aoa_function=curiosity_aoa,
    time_step=0.01,
    time_max=1000,
    verbose=False,
)

# Velocity vs. AoA, interpolated
perseverance_aoa = [
    (6000, 15),
    (5200, 20),
    (3000, 15),
    (2000, 15),
    (1000, 15),
    (500, 17),
    (300, -15),
    (0, -15)
]

perseverance_data, perseverance_params = sim_polar.simulate(
    mass=3110,
    area=15.9,
    entry_altitude=125000,
    entry_flight_path_angle=-15, # In cartesian simulation I used -12.5 for the best fit, Reality: -16? Derive from the Global cartesian position chart by eye!!!
    entry_velocity=5350,
    aoa_function=perseverance_aoa,
    time_step=0.01,
    time_max=1000,
    verbose=False,
)

phoenix_data, phoenix_params = sim_polar.simulate(
    mass=670,
    area=15.9,
    entry_altitude=125000,
    entry_flight_path_angle=-22, # Reality: -13
    entry_velocity=5875,
    aoa_function=0,
    time_step=0.01,
    time_max=1000,
    verbose=False,
)

opportunity_data, opportunity_params = sim_polar.simulate(
    mass=827,
    area=15.9,
    entry_altitude=125000,
    entry_flight_path_angle=-18, # Reality: -11.5, somethings pretty off here
    entry_velocity=5550,
    aoa_function=0,
    time_step=0.01,
    time_max=1000,
    verbose=False,
)

# Starship
starship_aoa = [
    (7600, 65),
    (6600, 65),
    (6000, 0),
    (5500, 0),
    (4500, -30),
    (2300, 0),
    (1600, 50),
    (800, 20),
    (500, 0),
    (300, 0)
]
# Fitting to the Starship trajectory is actually not ideal, it starts its burn way too early, ~500m/s. I can do better!

starship_data, starship_params = sim_polar.simulate(
    mass=200000,
    area=481,
    entry_altitude=125000,
    entry_flight_path_angle=-10,
    entry_velocity=7500,
    aoa_function=starship_aoa,
    time_step=0.01,
    time_max=1000,
    verbose=False,
)

sim_polar.plot(perseverance_data, perseverance_params, title="Perseverance Mars Entry Simulation", file_name="Historic Lander Charts/Perseverance.png", show=False, comparisons=[perseverance])
sim_polar.plot(curiosity_data, curiosity_params, title="Curiosity Mars Entry Simulation", file_name="Historic Lander Charts/Curiosity.png", show=False, comparisons=[curiosity])
sim_polar.plot(phoenix_data, phoenix_params, title="Phoenix Mars Entry Simulation", file_name="Historic Lander Charts/Phoenix.png", show=False, comparisons=[phoenix])
sim_polar.plot(opportunity_data, opportunity_params, title="Opportunity Mars Entry Simulation", file_name="Historic Lander Charts/Opportunity.png", show=False, comparisons=[opportunity])
sim_polar.plot(starship_data, starship_params, title="Starship Mars Entry Simulation", file_name="Historic Lander Charts/Starship.png", show=False, comparisons=[starship])